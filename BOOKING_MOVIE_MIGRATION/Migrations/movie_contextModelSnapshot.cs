// <auto-generated />
using System;
using BOOKING_MOVIE_ENTITY.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BOOKING_MOVIE_MIGRATION.Migrations
{
    [DbContext(typeof(movie_context))]
    partial class movie_contextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BOOKING_MOVIE_ENTITY.Entities.Actor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Name");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Actor");
                });

            modelBuilder.Entity("BOOKING_MOVIE_ENTITY.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Name");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("BOOKING_MOVIE_ENTITY.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Code");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<long>("CurrentLoyaltyPoint");

                    b.Property<string>("Email");

                    b.Property<string>("Mobile");

                    b.Property<string>("Name");

                    b.Property<string>("Note");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Sex");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("BOOKING_MOVIE_ENTITY.Entities.Director", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Name");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Director");
                });

            modelBuilder.Entity("BOOKING_MOVIE_ENTITY.Entities.InvoicePayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<long>("InvoiceId");

                    b.Property<long>("InvoiceMethodId");

                    b.Property<string>("Status");

                    b.Property<decimal?>("Total");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceMethodId");

                    b.ToTable("InvoicePayment");
                });

            modelBuilder.Entity("BOOKING_MOVIE_ENTITY.Entities.Movie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Country");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<string>("MovieStatus");

                    b.Property<string>("Name");

                    b.Property<string>("Rate");

                    b.Property<string>("Status");

                    b.Property<string>("Time");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("YearOfRelease");

                    b.HasKey("Id");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("BOOKING_MOVIE_ENTITY.Entities.MovieActor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ActorId");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<long>("MovieId");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.ToTable("MovieActors");
                });

            modelBuilder.Entity("BOOKING_MOVIE_ENTITY.Entities.MovieCategories", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CategoryId");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<long>("MovieId");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieCategories");
                });

            modelBuilder.Entity("BOOKING_MOVIE_ENTITY.Entities.MovieDirector", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<long>("DirectorId");

                    b.Property<long>("MovieId");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("MovieDirectors");
                });

            modelBuilder.Entity("BOOKING_MOVIE_ENTITY.Entities.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<long>("InvoiceId");

                    b.Property<string>("Name");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("BOOKING_MOVIE_ENTITY.Entities.Photo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<long?>("ObjectId");

                    b.Property<string>("Status");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("url");

                    b.HasKey("Id");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("BOOKING_MOVIE_ENTITY.Entities.Promotion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AvailableFrom");

                    b.Property<DateTime?>("AvailableTo");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<long>("CustomerId");

                    b.Property<string>("Description");

                    b.Property<string>("DiscountUnit");

                    b.Property<decimal>("DiscountValue");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Promotion");
                });

            modelBuilder.Entity("BOOKING_MOVIE_ENTITY.Entities.Rate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<long>("CustomerId");

                    b.Property<long>("MovieId");

                    b.Property<string>("Note");

                    b.Property<decimal>("Rating");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Rate");
                });

            modelBuilder.Entity("BOOKING_MOVIE_ENTITY.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Email");

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("Mobile");

                    b.Property<string>("Name");

                    b.Property<string>("PasswordHash");

                    b.Property<long?>("PhotoId");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("BOOKING_MOVIE_ENTITY.Entities.Video", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<long?>("ObjectId");

                    b.Property<string>("Status");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("url");

                    b.HasKey("Id");

                    b.ToTable("Video");
                });

            modelBuilder.Entity("BOOKING_MOVIE_ENTITY.Entities.InvoicePayment", b =>
                {
                    b.HasOne("BOOKING_MOVIE_ENTITY.Entities.PaymentMethod", "InvoiceMethod")
                        .WithMany()
                        .HasForeignKey("InvoiceMethodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BOOKING_MOVIE_ENTITY.Entities.MovieActor", b =>
                {
                    b.HasOne("BOOKING_MOVIE_ENTITY.Entities.Actor", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BOOKING_MOVIE_ENTITY.Entities.MovieCategories", b =>
                {
                    b.HasOne("BOOKING_MOVIE_ENTITY.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BOOKING_MOVIE_ENTITY.Entities.Movie")
                        .WithMany("MovieCategories")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BOOKING_MOVIE_ENTITY.Entities.MovieDirector", b =>
                {
                    b.HasOne("BOOKING_MOVIE_ENTITY.Entities.Director", "Director")
                        .WithMany()
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
